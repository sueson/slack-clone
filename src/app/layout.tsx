import type { Metadata } from "next";
import localFont from "next/font/local";

import "./globals.css";

import { ConvexClientProvider } from "@/components/convex-client-provider";

import { ConvexAuthNextjsServerProvider } from "@convex-dev/auth/nextjs/server";
import { Modals } from "@/components/modals";

import { Toaster } from "sonner";
import { JotaiProvider } from "@/components/jotai-provider";
import { NuqsAdapter } from "nuqs/adapters/next/app";


const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <ConvexAuthNextjsServerProvider>
      <html lang="en">
        <body
          className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        >
          <ConvexClientProvider>
            {/* From jotai-priovider.tsx */}
            {/* To avoid warning for ( eg. we haven't used proper intialization to use jotai ), so have to wrap the children into jotai provider to avoid that warning */}
            <JotaiProvider>
              <Toaster/>
              <Modals/>  { /* All modals are available in here */ }
              {/* wrapping the children with nuqs adapter for using nuqs in the workspace layout, so it should wrap the children in root layout */}
                <NuqsAdapter>
                  {children}
                </NuqsAdapter>
            </JotaiProvider>
            
          </ConvexClientProvider>
        </body>
      </html>
    </ConvexAuthNextjsServerProvider>
  );
}
